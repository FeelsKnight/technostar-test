#pragma checksum "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dbf369b305095c3b7d69ae2880e4ee87f39f476f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\feels\source\repos\technostar-test\Views\_ViewImports.cshtml"
using technostar_test;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\feels\source\repos\technostar-test\Views\_ViewImports.cshtml"
using technostar_test.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dbf369b305095c3b7d69ae2880e4ee87f39f476f", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"308f689b73906ee3eea31a1c2b189bde0b09b307", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<technostar_test.Models.IndexViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";
    string tableName;
    string headerName;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <div class=""row p-1"">
        <div class=""alert-info p-1 w-100 rounded"">
            <div class=""toggleDescription btn-sm btn-outline-info"">Toggle description</div>
            <div class=""description w-100 d-none-soft"">
                <p>Hey!</p>
                <p>
                    Thanks for taking the time to check out my test task. To be honest, I've had a blast toying around with it and sunk way more
                    hours into it than I probably should have. :) Hopefully it has something to show for it, at least! Now, let's get to the point, shall we?
                </p>
                <p>This thing is built on:</p>
                <ul>
                    <li>ASP.NET Core 3.1</li>
                    <li>jQuery 3.0.0</li>
                    <li>Bootstrap 4.5.3</li>
                    <li>Font Awesome 5</li>
                    <li>Plain old HTML, CSS and JavaScript</li>
                    <li>Just JSON for data storage</li>
                </");
            WriteLiteral(@"ul>
                <p>What this thing can generally do:</p>
                <ul>
                    <li>Be nice and cool and nifty</li>
                    <li>Look good in all configurations I've tested it in</li>
                    <li>Satisfy the conditions presented in the task</li>
                    <li>Hopefully impress you with my flawless skills and personality :P</li>
                </ul>
                <p>And its actual functionality includes:</p>
                <ul>
                    <li>Storing/retrieving data</li>
                    <li>
                        Highlighting related rows:
                        <ul>
                            <li>Tapping a Transaction row highlights it, the related product rows and the buyer in green and the seller in yellow (for gold, of course)</li>
                            <li>
                                Tapping a Product row highlights it, the related Transaction row, any other product rows related to that Transaction row,");
            WriteLiteral(@"
                                and the buyer in green and the seller in yellow
                            </li>
                            <li>
                                Tapping a Person row highlights it, all the Person rows this Person has made transactions with, the buying
                                (from the perspective of the person) Transaction rows in green, the selling Transaction rows in yellow, and Product rows the same color
                                as their related Transaction row
                            </li>
                            <li>Tapping any row makes text bold, marking it as highlight base, meaning all current highlights are related to this row</li>
                        </ul>
                    </li>
                    <li>
                        Manipulating data:
                        <ul>
                            <li>All hover actions are equivalent to touch actions on mobile</li>
                            <li>
                 ");
            WriteLiteral(@"               Hovering over table name brings up a plus button, which when clicked takes you down to the bottom of the table and presents you with a form
                                to create a new row in that table
                            </li>
                            <li>
                                Hovering over a table header brings up a sort button, which when clicked sorts the table by corresponding values in ascending order.
                                When clicked again, sorts in descending order
                            </li>
                            <li>Hovering over a row's rightmost cell brings up a delete button, which when clicked removes the row</li>
                            <li>Hovering over a row's leftmost cell brings up an edit button, which when clicked makes this row's values editable</li>
                            <li>Any changes made in the UI are sent to the controller and stored in the ""database""</li>
                        </ul>
           ");
            WriteLiteral(@"         </li>
                </ul>
                <p>Personally, this thing feels really fun to just fiddle around with. Hope you enjoy it as much as I do. :)</p>
                <p>
                    I also hope it actually works well as a test task, and shows my enthusiasm as well as skills related to the job. Don't tell anyone, but I'm
                    really looking forward to getting this job!
                </p>
                <p>Actually, if you could put in a word for me, I'd owe you one. ;)</p>
                <p>Just kidding. Again, thank you so much for your time reviewing this, and I really do hope I did well. Hope to see you at the interview!</p>
            </div>
        </div>
    </div>
    <div class=""row p-1"">
");
#nullable restore
#line 83 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
           tableName = "Transactions"; 

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        <table class=""table table-striped table-bordered border-success table-hover shadow-sm col m-1 transactions"">
            <thead class=""thead-dark text-nowrap"">
                <tr>
                    <th colspan=""5"">
                        <span>");
#nullable restore
#line 88 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(tableName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                        <button class=""addNewRow hoverable btn btn-primary"" title=""Add transaction"">
                            <i class=""fas fa-plus-circle""></i>
                        </button>
                    </th>
                </tr>
                <tr>
");
#nullable restore
#line 95 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 97 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 5783, "\"", 5920, 11);
            WriteAttributeValue("", 5824, "Sort", 5824, 4, true);
#nullable restore
#line 99 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 5828, tableName.ToLower(), 5829, 20, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 5849, "by", 5850, 3, true);
#nullable restore
#line 99 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 5852, headerName.ToLower(), 5853, 21, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 5874, ".", 5874, 1, true);
            WriteAttributeValue(" ", 5875, "One", 5876, 4, true);
            WriteAttributeValue(" ", 5879, "click:", 5880, 7, true);
            WriteAttributeValue(" ", 5886, "ascending.", 5887, 11, true);
            WriteAttributeValue(" ", 5897, "Two", 5898, 4, true);
            WriteAttributeValue(" ", 5901, "clicks:", 5902, 8, true);
            WriteAttributeValue(" ", 5909, "descending", 5910, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 103 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Buyer id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 105 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 6251, "\"", 6388, 11);
            WriteAttributeValue("", 6292, "Sort", 6292, 4, true);
#nullable restore
#line 107 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 6296, tableName.ToLower(), 6297, 20, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 6317, "by", 6318, 3, true);
#nullable restore
#line 107 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 6320, headerName.ToLower(), 6321, 21, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 6342, ".", 6342, 1, true);
            WriteAttributeValue(" ", 6343, "One", 6344, 4, true);
            WriteAttributeValue(" ", 6347, "click:", 6348, 7, true);
            WriteAttributeValue(" ", 6354, "ascending.", 6355, 11, true);
            WriteAttributeValue(" ", 6365, "Two", 6366, 4, true);
            WriteAttributeValue(" ", 6369, "clicks:", 6370, 8, true);
            WriteAttributeValue(" ", 6377, "descending", 6378, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 111 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Seller id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 113 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 6720, "\"", 6857, 11);
            WriteAttributeValue("", 6761, "Sort", 6761, 4, true);
#nullable restore
#line 115 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 6765, tableName.ToLower(), 6766, 20, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 6786, "by", 6787, 3, true);
#nullable restore
#line 115 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 6789, headerName.ToLower(), 6790, 21, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 6811, ".", 6811, 1, true);
            WriteAttributeValue(" ", 6812, "One", 6813, 4, true);
            WriteAttributeValue(" ", 6816, "click:", 6817, 7, true);
            WriteAttributeValue(" ", 6823, "ascending.", 6824, 11, true);
            WriteAttributeValue(" ", 6834, "Two", 6835, 4, true);
            WriteAttributeValue(" ", 6838, "clicks:", 6839, 8, true);
            WriteAttributeValue(" ", 6846, "descending", 6847, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 119 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Date & time"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 121 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 7191, "\"", 7308, 11);
            WriteAttributeValue("", 7232, "Sort", 7232, 4, true);
#nullable restore
#line 123 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 7236, tableName, 7237, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 7247, "by", 7248, 3, true);
#nullable restore
#line 123 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 7250, headerName, 7251, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 7262, ".", 7262, 1, true);
            WriteAttributeValue(" ", 7263, "One", 7264, 4, true);
            WriteAttributeValue(" ", 7267, "click:", 7268, 7, true);
            WriteAttributeValue(" ", 7274, "ascending.", 7275, 11, true);
            WriteAttributeValue(" ", 7285, "Two", 7286, 4, true);
            WriteAttributeValue(" ", 7289, "clicks:", 7290, 8, true);
            WriteAttributeValue(" ", 7297, "descending", 7298, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 127 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Amount, $"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 129 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 7640, "\"", 7757, 11);
            WriteAttributeValue("", 7681, "Sort", 7681, 4, true);
#nullable restore
#line 131 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 7685, tableName, 7686, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 7696, "by", 7697, 3, true);
#nullable restore
#line 131 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 7699, headerName, 7700, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 7711, ".", 7711, 1, true);
            WriteAttributeValue(" ", 7712, "One", 7713, 4, true);
            WriteAttributeValue(" ", 7716, "click:", 7717, 7, true);
            WriteAttributeValue(" ", 7723, "ascending.", 7724, 11, true);
            WriteAttributeValue(" ", 7734, "Two", 7735, 4, true);
            WriteAttributeValue(" ", 7738, "clicks:", 7739, 8, true);
            WriteAttributeValue(" ", 7746, "descending", 7747, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n");
#nullable restore
#line 138 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                 if (Model.Transactions != null && Model.Transactions.Any())
                {
                    foreach (var transaction in Model.Transactions)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"id\">");
#nullable restore
#line 144 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                            Write(transaction.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                                <button class=""editRow hoverable btn btn-primary"" title=""Edit this row""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
                                <span class=""buyerId"">");
#nullable restore
#line 148 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                 Write(transaction.BuyerId);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td>\r\n                                <span class=\"sellerId\">");
#nullable restore
#line 151 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                  Write(transaction.SellerId);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td>\r\n                                <span class=\"dateTime\">");
#nullable restore
#line 154 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                  Write(transaction.DateTime.ToString("g"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"usdAmount\">");
#nullable restore
#line 157 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                   Write(transaction.UsdAmount);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                                <button class=\"removeRow hoverable btn btn-danger\" title=\"Delete this row\"><i class=\"far fa-times-circle\"></i></button>\r\n                            </td>\r\n                        </tr>\r\n");
#nullable restore
#line 161 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                    }
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"            </tbody>
            <tfoot>
                <tr class=""newRowForm d-none-soft"">
                    <td class=""p-0"">
                        <button class=""cancelForm btn btn-danger w-100 p-0 rounded-0"" title=""Cancel""><i class=""far fa-times-circle""></i></button>
                        <button class=""submitForm btn btn-success w-100 p-0 rounded-0"" title=""Submit""><i class=""far fa-check-circle""></i></button>
                    </td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Buyer id"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Seller id"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Date & time"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Amount, $"" /></td>
                </tr>
            </tfoot>
        </table>
");
#nullable restore
#line 177 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
           tableName = "Products"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("        <table class=\"table table-striped table-bordered table-hover shadow-sm col m-1 products\">\r\n            <thead class=\"thead-dark text-nowrap\">\r\n                <tr>\r\n                    <th colspan=\"4\">\r\n                        <span>");
#nullable restore
#line 182 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(tableName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                        <button class=""addNewRow hoverable btn btn-primary"" title=""Add product"">
                            <i class=""fas fa-plus-circle""></i>
                        </button>
                    </th>
                </tr>
                <tr>
");
#nullable restore
#line 189 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 191 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 11066, "\"", 11183, 11);
            WriteAttributeValue("", 11107, "Sort", 11107, 4, true);
#nullable restore
#line 193 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 11111, tableName, 11112, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 11122, "by", 11123, 3, true);
#nullable restore
#line 193 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 11125, headerName, 11126, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 11137, ".", 11137, 1, true);
            WriteAttributeValue(" ", 11138, "One", 11139, 4, true);
            WriteAttributeValue(" ", 11142, "click:", 11143, 7, true);
            WriteAttributeValue(" ", 11149, "ascending.", 11150, 11, true);
            WriteAttributeValue(" ", 11160, "Two", 11161, 4, true);
            WriteAttributeValue(" ", 11164, "clicks:", 11165, 8, true);
            WriteAttributeValue(" ", 11172, "descending", 11173, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 197 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Transaction id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 199 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 11520, "\"", 11637, 11);
            WriteAttributeValue("", 11561, "Sort", 11561, 4, true);
#nullable restore
#line 201 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 11565, tableName, 11566, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 11576, "by", 11577, 3, true);
#nullable restore
#line 201 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 11579, headerName, 11580, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 11591, ".", 11591, 1, true);
            WriteAttributeValue(" ", 11592, "One", 11593, 4, true);
            WriteAttributeValue(" ", 11596, "click:", 11597, 7, true);
            WriteAttributeValue(" ", 11603, "ascending.", 11604, 11, true);
            WriteAttributeValue(" ", 11614, "Two", 11615, 4, true);
            WriteAttributeValue(" ", 11618, "clicks:", 11619, 8, true);
            WriteAttributeValue(" ", 11626, "descending", 11627, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 205 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Type"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 207 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 11964, "\"", 12081, 11);
            WriteAttributeValue("", 12005, "Sort", 12005, 4, true);
#nullable restore
#line 209 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 12009, tableName, 12010, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 12020, "by", 12021, 3, true);
#nullable restore
#line 209 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 12023, headerName, 12024, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 12035, ".", 12035, 1, true);
            WriteAttributeValue(" ", 12036, "One", 12037, 4, true);
            WriteAttributeValue(" ", 12040, "click:", 12041, 7, true);
            WriteAttributeValue(" ", 12047, "ascending.", 12048, 11, true);
            WriteAttributeValue(" ", 12058, "Two", 12059, 4, true);
            WriteAttributeValue(" ", 12062, "clicks:", 12063, 8, true);
            WriteAttributeValue(" ", 12070, "descending", 12071, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 213 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Model"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 215 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 12409, "\"", 12526, 11);
            WriteAttributeValue("", 12450, "Sort", 12450, 4, true);
#nullable restore
#line 217 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 12454, tableName, 12455, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 12465, "by", 12466, 3, true);
#nullable restore
#line 217 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 12468, headerName, 12469, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 12480, ".", 12480, 1, true);
            WriteAttributeValue(" ", 12481, "One", 12482, 4, true);
            WriteAttributeValue(" ", 12485, "click:", 12486, 7, true);
            WriteAttributeValue(" ", 12492, "ascending.", 12493, 11, true);
            WriteAttributeValue(" ", 12503, "Two", 12504, 4, true);
            WriteAttributeValue(" ", 12507, "clicks:", 12508, 8, true);
            WriteAttributeValue(" ", 12515, "descending", 12516, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n");
#nullable restore
#line 224 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                 if (Model.Products != null && Model.Products.Any())
                {
                    foreach (var product in Model.Products)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"id\">");
#nullable restore
#line 230 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                            Write(product.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                                <button class=""editRow hoverable btn btn-primary"" title=""Edit this row""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
                                <span class=""transactionId"">");
#nullable restore
#line 234 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                       Write(product.TransactionId);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td>\r\n                                <span class=\"type\">");
#nullable restore
#line 237 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                              Write(product.Type);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"model\">");
#nullable restore
#line 240 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                               Write(product.Model);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                                <button class=\"removeRow hoverable btn btn-danger\" title=\"Delete this row\"><i class=\"far fa-times-circle\"></i></button>\r\n                            </td>\r\n                        </tr>\r\n");
#nullable restore
#line 244 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                    }
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"            </tbody>
            <tfoot>
                <tr class=""newRowForm d-none-soft"">
                    <td class=""p-0"">
                        <button class=""cancelForm btn btn-danger w-100 p-0 rounded-0"" title=""Cancel""><i class=""far fa-times-circle""></i></button>
                        <button class=""submitForm btn btn-success w-100 p-0 rounded-0"" title=""Submit""><i class=""far fa-check-circle""></i></button>
                    </td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Transaction id"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Type"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Model"" /></td>
                </tr>
            </tfoot>
        </table>
");
#nullable restore
#line 259 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
           tableName = "Persons"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("        <table class=\"table table-striped table-bordered table-hover shadow-sm col flex-shrink-1 m-1 persons\">\r\n            <thead class=\"thead-dark text-nowrap\">\r\n                <tr>\r\n                    <th colspan=\"3\">\r\n                        <span>");
#nullable restore
#line 264 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(tableName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                        <button class=""addNewRow hoverable btn btn-primary"" title=""Add person"">
                            <i class=""fas fa-plus-circle""></i>
                        </button>
                    </th>
                </tr>
                <tr>
");
#nullable restore
#line 271 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Id"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 273 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 15532, "\"", 15649, 11);
            WriteAttributeValue("", 15573, "Sort", 15573, 4, true);
#nullable restore
#line 275 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 15577, tableName, 15578, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 15588, "by", 15589, 3, true);
#nullable restore
#line 275 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 15591, headerName, 15592, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 15603, ".", 15603, 1, true);
            WriteAttributeValue(" ", 15604, "One", 15605, 4, true);
            WriteAttributeValue(" ", 15608, "click:", 15609, 7, true);
            WriteAttributeValue(" ", 15615, "ascending.", 15616, 11, true);
            WriteAttributeValue(" ", 15626, "Two", 15627, 4, true);
            WriteAttributeValue(" ", 15630, "clicks:", 15631, 8, true);
            WriteAttributeValue(" ", 15638, "descending", 15639, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 279 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Name"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 281 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 15976, "\"", 16093, 11);
            WriteAttributeValue("", 16017, "Sort", 16017, 4, true);
#nullable restore
#line 283 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 16021, tableName, 16022, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 16032, "by", 16033, 3, true);
#nullable restore
#line 283 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 16035, headerName, 16036, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16047, ".", 16047, 1, true);
            WriteAttributeValue(" ", 16048, "One", 16049, 4, true);
            WriteAttributeValue(" ", 16052, "click:", 16053, 7, true);
            WriteAttributeValue(" ", 16059, "ascending.", 16060, 11, true);
            WriteAttributeValue(" ", 16070, "Two", 16071, 4, true);
            WriteAttributeValue(" ", 16074, "clicks:", 16075, 8, true);
            WriteAttributeValue(" ", 16082, "descending", 16083, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n");
#nullable restore
#line 287 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       headerName = "Birthday"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <th>\r\n                        <span>");
#nullable restore
#line 289 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                         Write(headerName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        <button class=\"sort hoverable btn btn-primary\"");
            BeginWriteAttribute("title", "\r\n                                title=\"", 16424, "\"", 16541, 11);
            WriteAttributeValue("", 16465, "Sort", 16465, 4, true);
#nullable restore
#line 291 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 16469, tableName, 16470, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue(" ", 16480, "by", 16481, 3, true);
#nullable restore
#line 291 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
WriteAttributeValue(" ", 16483, headerName, 16484, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 16495, ".", 16495, 1, true);
            WriteAttributeValue(" ", 16496, "One", 16497, 4, true);
            WriteAttributeValue(" ", 16500, "click:", 16501, 7, true);
            WriteAttributeValue(" ", 16507, "ascending.", 16508, 11, true);
            WriteAttributeValue(" ", 16518, "Two", 16519, 4, true);
            WriteAttributeValue(" ", 16522, "clicks:", 16523, 8, true);
            WriteAttributeValue(" ", 16530, "descending", 16531, 11, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                            <i class=\"fas fa-sort-alpha-down\"></i>\r\n                        </button>\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n");
#nullable restore
#line 298 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                 if (Model.Persons != null && Model.Persons.Any())
                {
                    foreach (var person in Model.Persons)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"id\">");
#nullable restore
#line 304 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                            Write(person.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</span>
                                <button class=""editRow hoverable btn btn-primary"" title=""Edit this row""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
                                <span class=""name"">");
#nullable restore
#line 308 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                              Write(person.Name);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                            </td>\r\n                            <td class=\"position-relative\">\r\n                                <span class=\"birthday\">");
#nullable restore
#line 311 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                  Write(person.Birthday.ToShortDateString());

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                                <button class=\"removeRow hoverable btn btn-danger\" title=\"Delete this row\"><i class=\"far fa-times-circle\"></i></button>\r\n                            </td>\r\n                        </tr>\r\n");
#nullable restore
#line 315 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                    }
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"            </tbody>
            <tfoot>
                <tr class=""newRowForm d-none-soft"">
                    <td class=""p-0"">
                        <button class=""cancelForm btn btn-danger w-100 p-0 rounded-0"" title=""Cancel""><i class=""far fa-times-circle""></i></button>
                        <button class=""submitForm btn btn-success w-100 p-0 rounded-0"" title=""Submit""><i class=""far fa-check-circle""></i></button>
                    </td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Name"" /></td>
                    <td class=""p-0""><input class=""w-100 h-100 border-0"" placeholder=""Birthday"" /></td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<script>
    jQuery(document).ready(function () {
        // utility function for later on
        let getAndTrimHtmlOfChildElement = function (object, childElementSelector) {
            return $.trim($(object).find(childElementSelector).html());
        }
        // gene");
            WriteLiteral(@"rally useful selector
        let dataTablesSelector = ""table.transactions, table.products, table.persons"";



        $("".toggleDescription"").on(""click"", function () {
            $("".description"").slideToggle(""slow"");
        });



        // transforms row to allow editing
        $(dataTablesSelector).on(""click"", "".editRow"", function () {
            let row = $(this).closest(""tr"");
            let tds = row.find(""td"");
            tds.children().addClass(""d-none"");
            tds.addClass(""p-0"");
            tds.eq(0).append(`<button class=""cancelEdit btn btn-danger w-100 p-0 rounded-0""><i class=""far fa-times-circle""></i></button>
                              <button class=""submitEdit btn btn-success w-100 p-0 rounded-0""><i class=""far fa-check-circle""></i></button>`);
            tds.not("":eq(0)"").each(function () {
                let thisValue = getAndTrimHtmlOfChildElement(this, ""span"");
                $(this).append(`<input class=""w-100 h-100 border-0"" value=""${thisValue}"" />");
            WriteLiteral(@"`);
            });
        });

        $(dataTablesSelector).on(""click"", "".cancelEdit"", function () {
            let row = $(this).closest(""tr"");
            let tds = row.find(""td"");
            row.find("".cancelEdit, .submitEdit, input"").remove();
            tds.removeClass(""p-0"");
            tds.find("".d-none"").removeClass(""d-none"");
        });

        $(dataTablesSelector).on(""click"", "".submitEdit"", function () {
            let row = $(this).closest(""tr"");
            let id = getAndTrimHtmlOfChildElement(row, "".id"");
            let inputs = row.find(""td input"");
            if (row.closest(""table"").hasClass(""transactions"")) {
                // reads all the inputs
                let buyerId = $.trim(inputs.eq(0).val());
                let sellerId = $.trim(inputs.eq(1).val());
                let dateTime = $.trim(inputs.eq(2).val());
                let usdAmount = $.trim(inputs.eq(3).val());
                // this should have extra checks for types etc.
             ");
            WriteLiteral("   // if any input is not filled out\r\n                if (!buyerId || !sellerId || !dateTime || !usdAmount) {\r\n                    alert(\"Something\'s not right with the submitted data.\");\r\n                } else {\r\n                    $.post(\"");
#nullable restore
#line 386 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("EditTransaction", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Transaction object
                        {
                            Id: id,
                            BuyerId: buyerId,
                            SellerId: sellerId,
                            DateTime: dateTime,
                            UsdAmount: usdAmount
                        }, function (result) {
                            if (result === 0) {
                                row.find("".buyerId"").html(buyerId);
                                row.find("".sellerId"").html(sellerId);
                                row.find("".dateTime"").html(dateTime);
                                row.find("".usdAmount"").html(usdAmount);
                            } else {
                                alert(""Something went wrong when uploading the submitted data."");
                            }
                            row.find("".cancelEdit"").trigger(""click"");
                        });
                }
            } else if (row.closes");
            WriteLiteral(@"t(""table"").hasClass(""products"")) {
                // reads all the inputs
                let transactionId = $.trim(inputs.eq(0).val());
                let type = $.trim(inputs.eq(1).val());
                let model = $.trim(inputs.eq(2).val());
                // this should have extra checks for types etc.
                // if any of the required inputs is not filled out
                if (!transactionId || !type) {
                    alert(""Something's not right with the submitted data."");
                } else {
                    $.post(""");
#nullable restore
#line 416 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("EditProduct", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Product object
                        {
                            Id: id,
                            TransactionId: transactionId,
                            Type: type,
                            Model: model
                        }, function (result) {
                            if (result === 0) {
                                row.find("".transactionId"").html(transactionId);
                                row.find("".type"").html(type);
                                row.find("".model"").html(model);
                            } else {
                                alert(""Something went wrong when uploading the submitted data."");
                            }
                            row.find("".cancelEdit"").trigger(""click"");
                        });
                }
            } else if (row.closest(""table"").hasClass(""persons"")) {
                // reads all the inputs
                let name = $.trim(inputs.eq(0).val());
");
            WriteLiteral(@"                let birthday = $.trim(inputs.eq(1).val());
                // this should have extra checks for types etc.
                // if any of the inputs is not filled out
                if (!name || !birthday) {
                    alert(""Something's not right with the submitted data."");
                } else {
                    $.post(""");
#nullable restore
#line 443 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("EditPerson", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Person object
                        {
                            Id: id,
                            Name: name,
                            Birthday: birthday
                        }, function (result) {
                            if (result === 0) {
                                row.find("".name"").html(name);
                                row.find("".birthday"").html(birthday);
                            } else {
                                alert(""Something went wrong when uploading the submitted data."");
                            }
                            row.find("".cancelEdit"").trigger(""click"");
                        });
                }
            }
        });



        // removes row - quite expectedly
        $(dataTablesSelector).on(""click"", "".removeRow"", function () {
            // extracts the id
            let row = $(this).closest(""tr"");
            let id = getAndTrimHtmlOfChildElement(row, "".id"");
    ");
            WriteLiteral("        // chooses controller action based on parent table\r\n            let table = row.closest(\"table\");\r\n            let actionUrl = table.hasClass(\"transactions\") ? \"");
#nullable restore
#line 471 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                         Write(Url.Action("RemoveTransaction", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\" :\r\n                            table.hasClass(\"products\") ? \"");
#nullable restore
#line 472 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                     Write(Url.Action("RemoveProduct", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\" :\r\n                            table.hasClass(\"persons\") ? \"");
#nullable restore
#line 473 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                                                    Write(Url.Action("RemovePerson", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""" : """";
            $.post(actionUrl,
                { id: id }, function (result) {
                    if (result === 0) {
                        row.fadeOut(""fast"", function () { row.remove(); });
                    }
                });
        });



        // adds rows to data tables
        // no input formatting in these or in the backend, hope it's not necessary for a task like this :P
        // also creating elements with copy-paste html here is pretty awful, could be made better with cloning
        let addTransaction = function (id, buyerId, sellerId, dateTime, usdAmount) {
            let tbody = $(""table.transactions tbody"");
            let row = $(`<tr>
                            <td class=""position-relative"">
                                <span class=""id"">${id}</span>
                                <button class=""editRow hoverable btn btn-primary""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
            ");
            WriteLiteral(@"                    <span class=""buyerId"">${buyerId}</span>
                            </td>
                            <td>
                                <span class=""sellerId"">${sellerId}</span>
                            </td>
                            <td>
                                <span class=""dateTime"">${dateTime}</span>
                            </td>
                            <td class=""position-relative"">
                                <span class=""usdAmount"">${usdAmount}</span>
                                <button class=""removeRow hoverable btn btn-danger""><i class=""far fa-times-circle""></i></button>
                            </td>
                        </tr>`);
            tbody.append(row);
            row.fadeIn(""fast"");
        };

        let addProduct = function (id, transactionId, type, model) {
            let tbody = $(""table.products tbody"");
            let row = $(`<tr>
                            <td class=""position-relative"">
             ");
            WriteLiteral(@"                   <span class=""id"">${id}</span>
                                <button class=""editRow hoverable btn btn-primary""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
                                <span class=""transactionId"">${transactionId}</span>
                            </td>
                            <td>
                                <span class=""type"">${type}</span>
                            </td>
                            <td class=""position-relative"">
                                <span class=""model"">${model}</span>
                                <button class=""removeRow hoverable btn btn-danger""><i class=""far fa-times-circle""></i></button>
                            </td>
                        </tr>`);
            tbody.append(row);
            row.fadeIn(""fast"");
        };

        let addPerson = function (id, name, birthday) {
            let tbody = $(""table.persons tbody"");
            let");
            WriteLiteral(@" row = $(`<tr>
                            <td class=""position-relative"">
                                <span class=""id"">${id}</span>
                                <button class=""editRow hoverable btn btn-primary""><i class=""fas fa-edit""></i></button>
                            </td>
                            <td>
                                <span class=""name"">${name}</span>
                            </td>
                            <td class=""position-relative"">
                                <span class=""birthday"">${birthday}</span>
                                <button class=""removeRow hoverable btn btn-danger""><i class=""far fa-times-circle""></i></button>
                            </td>
                        </tr>`);
            tbody.append(row);
            row.fadeIn(""fast"");
        };

        // opens up new row form
        $(dataTablesSelector).on(""click"", "".addNewRow"", function () {
            let form = $(this).closest(""table"").find("".newRowForm"");
       ");
            WriteLiteral(@"     // scrolls to form and shows it
            $([document.documentElement, document.body]).animate({
                scrollTop: $(this).closest(""table"").find(""tbody tr"").last().offset().top - $(window).height() / 2
            }, 500, function () {
                form.fadeIn(""fast"");
            });
        });

        // cancels new row form
        $(dataTablesSelector).on(""click"", "".cancelForm"", function () {
            let row = $(this).closest(""tr"");
            // hides the form and clears the inputs
            row.fadeOut(""fast"", function () { row.find(""input"").val(""""); });
        });

        // submits new row form
        $(dataTablesSelector).on(""click"", "".submitForm"", function () {
            let row = $(this).closest(""tr"");
            let inputs = row.find(""td input"");
            if (row.closest(""table"").hasClass(""transactions"")) {
                // reads all the inputs
                let buyerId = $.trim(inputs.eq(0).val());
                let sellerId = $.tri");
            WriteLiteral(@"m(inputs.eq(1).val());
                let dateTime = $.trim(inputs.eq(2).val());
                let usdAmount = $.trim(inputs.eq(3).val());
                // this should have extra checks for types etc.
                // if any input is not filled out
                if (!buyerId || !sellerId || !dateTime || !usdAmount) {
                    alert(""Something's not right with the submitted data."");
                } else {
                    $.post(""");
#nullable restore
#line 586 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("AddTransaction", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Transaction object
                        {
                            Id: 0,
                            BuyerId: buyerId,
                            SellerId: sellerId,
                            DateTime: dateTime,
                            UsdAmount: usdAmount
                        }, function (id) {
                            row.find("".cancelForm"").trigger(""click"");
                            addTransaction(id, buyerId, sellerId, dateTime, usdAmount);
                        });
                }
            } else if (row.closest(""table"").hasClass(""products"")) {
                // reads all the inputs
                let transactionId = $.trim(inputs.eq(0).val());
                let type = $.trim(inputs.eq(1).val());
                let model = $.trim(inputs.eq(2).val());
                // this should have extra checks for types etc.
                // if any of the required inputs is not filled out
                if (!transact");
            WriteLiteral("ionId || !type) {\r\n                    alert(\"Something\'s not right with the submitted data.\");\r\n                } else {\r\n                    $.post(\"");
#nullable restore
#line 609 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("AddProduct", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Product object
                        {
                            Id: 0,
                            TransactionId: transactionId,
                            Type: type,
                            Model: model
                        }, function (id) {
                            row.find("".cancelForm"").trigger(""click"");
                            addProduct(id, transactionId, type, model);
                        });
                }
            } else if (row.closest(""table"").hasClass(""persons"")) {
                // reads all the inputs
                let name = $.trim(inputs.eq(0).val());
                let birthday = $.trim(inputs.eq(1).val());
                // this should have extra checks for types etc.
                // if any of the inputs is not filled out
                if (!name || !birthday) {
                    alert(""Something's not right with the submitted data."");
                } else {
                    $.post(");
            WriteLiteral("\"");
#nullable restore
#line 630 "C:\Users\feels\source\repos\technostar-test\Views\Home\Index.cshtml"
                       Write(Url.Action("AddPerson", "IO"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                        // constructs a Person object
                        {
                            Id: 0,
                            Name: name,
                            Birthday: birthday
                        }, function (id) {
                            row.find("".cancelForm"").trigger(""click"");
                            addPerson(id, name, birthday);
                        });
                }
            }
        });



        // shows hoverable buttons when hovering over a header
        $(dataTablesSelector)
            .find(""thead, tbody"")
            .on(""mouseenter"", ""th, td"", function () {
                $(this).find("".hoverable"").fadeIn(""fast"");
            })
            .on(""mouseleave"", ""th, td"", function () {
                $(this).find("".hoverable"").fadeOut(""fast"");
            });

        // sorts elements in ascending/descending order based on
        // whether the corresponding column contains strings,
        // numbers or dates
  ");
            WriteLiteral(@"      let sortClickHandler = function () {
            let th = $(this).closest(""th"");
            // .index() is 0-indexed
            // + 1 to later use it with nth-child, which is 1-indexed
            let i = th.index() + 1;
            let tbody = $(this).closest(""table"").find(""tbody"");
            let trsToSort = tbody.find(""tr"");
            // gets name of header to determine what type of data will be sorted
            let headerName = getAndTrimHtmlOfChildElement(th, ""span"").toLowerCase();
            // manage .descending marker on .sort buttons
            let ascending = !$(this).hasClass(""descending"");
            $(this).closest(""table"").find(""thead .sort.descending"").not(this).removeClass(""descending"");
            $(this).toggleClass(""descending"");
            // after writing this sorting function, I realized that it should really be optimized
            // to be a choice of functions based on the conditions. currently, it checks the
            // conditions every iteration");
            WriteLiteral(@". not great, not terrible - you can't really
            // notice it with the test data's size, so I'm not going to bother. let's just say
            // I can do it if I need to, so I hope that's good enough :)
            trsToSort
                .sort(function (a, b) {
                    let aValue = getAndTrimHtmlOfChildElement(a, `td:nth-child(${i}) span`);
                    let bValue = getAndTrimHtmlOfChildElement(b, `td:nth-child(${i}) span`);
                    // if header name denotes an id column, parses values as integers
                    if (headerName.includes(""id"")) {
                        aValue = parseInt(aValue);
                        bValue = parseInt(bValue);
                    }
                    // if header name denotes an amount column, parses values as floats
                    else if (headerName.includes(""amount"")) {
                        aValue = parseFloat(aValue);
                        bValue = parseFloat(bValue);
                    }
     ");
            WriteLiteral(@"               // if header name denotes a date column, parses values as dates
                    else if (headerName.includes(""date"") || headerName === ""birthday"") {
                        // stripping time here since time doesn't come into play in test data
                        let aIndexOfSpace = aValue.indexOf("" "");
                        if (aIndexOfSpace > -1) aValue = aValue.slice(0, aIndexOfSpace + 1);
                        let aParts = aValue.split(""."");
                        aValue = new Date(aParts[2], aParts[1] - 1, aParts[0]).valueOf();
                        let bIndexOfSpace = bValue.indexOf("" "");
                        if (bIndexOfSpace > -1) bValue = bValue.slice(0, bIndexOfSpace + 1);
                        let bParts = bValue.split(""."");
                        bValue = new Date(bParts[2], bParts[1] - 1, bParts[0]).valueOf();
                    }
                    // returns values according to .sort() function
                    return (aValue < bValue ? -1 : ");
            WriteLiteral(@"// -1 to put a first
                            aValue > bValue ? 1 :   // 1 to put b first
                            0)                      // 0 to not change order
                            * (ascending ? 1 : -1); // also multiplies the result by -1 for descending order
                })
                .appendTo(tbody);
        };
        $(dataTablesSelector)
            .on(""click"", "".sort"", sortClickHandler);


        // support functions for highlighting selected and relevant rows

        // finds relevant rows in other tables based on ids and returns them
        // takes a jquery object containing a row, returns a jquery object containing relevant rows
        //
        // the three following functions are only different in the specifics of finding
        // relevant rows starting from a transaction, product or person row

        // relevant rows starting from transaction row
        let findRelevantRowsByTransactionRow = function (row) {
            // extract ids wh");
            WriteLiteral(@"ile trimming them
            let transactionId = getAndTrimHtmlOfChildElement(row, "".id"");
            let buyerId = getAndTrimHtmlOfChildElement(row, "".buyerId"");
            let sellerId = getAndTrimHtmlOfChildElement(row, "".sellerId"");
            // gets product rows where transaction id matches the required transaction id
            let productRows = $(""table.products tbody tr"").filter(function () {
                let productTransactionId = getAndTrimHtmlOfChildElement(this, "".transactionId"");
                return productTransactionId === transactionId;
            });
            // gets person rows where id matches the required buyer or seller id
            let personRows = $(""table.persons tbody tr"").filter(function () {
                let personId = getAndTrimHtmlOfChildElement(this, "".id"");
                return personId === buyerId || personId === sellerId;
            });
            // returns all found rows
            return productRows.add(personRows);
        };

   ");
            WriteLiteral(@"     // relevant rows starting from product row
        let findRelevantRowsByProductRow = function (row) {
            // extract transaction id while trimming it
            let transactionId = getAndTrimHtmlOfChildElement(row, "".transactionId"");
            // gets transaction row where id matches the required transaction id
            let transactionRow = $(""table.transactions tbody tr"").filter(function () {
                let transactionRowTransactionId = getAndTrimHtmlOfChildElement(this, "".id"");
                return transactionRowTransactionId === transactionId;
            });
            // gets rows relevant to found transaction row
            let relevantRows = findRelevantRowsByTransactionRow(transactionRow);
            // returns all found rows
            return transactionRow.add(relevantRows);
        };

        // relevant rows starting from person row
        let findRelevantRowsByPersonRow = function (row) {
            // extract id while trimming it
            le");
            WriteLiteral(@"t personId = getAndTrimHtmlOfChildElement(row, "".id"");
            // gets transaction rows where buyer or seller id matches required id
            let transactionRows = $(""table.transactions tbody tr"").filter(function () {
                let buyerId = getAndTrimHtmlOfChildElement(this, "".buyerId"");
                let sellerId = getAndTrimHtmlOfChildElement(this, "".sellerId"");
                return personId === buyerId || personId === sellerId;
            });
            // extract transaction ids from the found transaction rows while trimming them
            let transactionIds = transactionRows
                .map(function () {
                    return getAndTrimHtmlOfChildElement(this, "".id"");
                })
                .toArray();
            // extracts buyer and seller ids
            let buyerIds = transactionRows
                .map(function () {
                    return getAndTrimHtmlOfChildElement(this, "".buyerId"");
                })
                .toArray();");
            WriteLiteral(@"
            let sellerIds = transactionRows
                .map(function () {
                    return getAndTrimHtmlOfChildElement(this, "".sellerId"");
                })
                .toArray();
            // there could be duplicates in the resulting array
            // and there will also be the selected person's id in array,
            // but it doesn't matter if it's a buyer or a seller,
            // and the selected person's row will be highlighted anyway,
            // so it doesn't matter for this kind of behavior
            let buyerAndSellerIds = buyerIds.concat(sellerIds);
            // gets buyer and seller rows
            let buyerAndSellerRows = $(""table.persons tbody tr"").filter(function () {
                let buyerOrSellerId = getAndTrimHtmlOfChildElement(this, "".id"");
                return $.inArray(buyerOrSellerId, buyerAndSellerIds) > -1;
            });
            // gets product rows where transaction id matches one of the required ids
            let ");
            WriteLiteral(@"productRows = $(""table.products tbody tr"").filter(function () {
                let productTransactionId = getAndTrimHtmlOfChildElement(this, "".transactionId"");
                return transactionIds.includes(productTransactionId);
            });
            return transactionRows.add(productRows).add(buyerAndSellerRows);
        };

        // finds a buyer row and a seller row from a jquery object containing rows
        // takes a jquery object containing rows, a buyer id and a seller id
        // returns an array containing a buyer row first and a seller row second
        let findBuyerAndSellerInRows = function (rows, buyerId, sellerId) {
            // gets person row where buyer id matches the required id
            let buyerRow = $(rows).filter(function () {
                let closestTableIsPersons = $(this).closest(""table.persons"").length > 0;
                let personId = getAndTrimHtmlOfChildElement(this, "".id"");
                return closestTableIsPersons && personId === buyerI");
            WriteLiteral(@"d;
            });
            // gets person row where seller id matches the required id
            let sellerRow = $(rows).filter(function () {
                let closestTableIsPersons = $(this).closest(""table.persons"").length > 0;
                let personId = getAndTrimHtmlOfChildElement(this, "".id"");
                return closestTableIsPersons && personId === sellerId;
            });
            return [buyerRow, sellerRow];
        };

        // finds buying and selling transaction and product rows
        // takes a jquery object containing rows and a person's id
        // returns an array containing two jquery objects
        // first jquery object contains buying transactions and products
        // second jquery object contains selling transactions and products
        let findBuyingAndSellingTransactionAndProductInRows = function (rows, personId) {
            // gets buying transaction rows
            let buyingTransactionRows = rows.filter(function () {
                ");
            WriteLiteral(@"let buyerId = getAndTrimHtmlOfChildElement(this, "".buyerId"");
                return buyerId === personId;
            });
            // gets selling transaction rows
            let sellingTransactionRows = rows.filter(function () {
                let sellerId = getAndTrimHtmlOfChildElement(this, "".sellerId"");
                return sellerId === personId;
            });
            // extracts buying transaction ids
            let buyingTransactionIds = buyingTransactionRows
                .map(function () {
                    return getAndTrimHtmlOfChildElement(this, "".id"");
                })
                .toArray();
            // extracts selling transaction ids
            let sellingTransactionIds = sellingTransactionRows
                .map(function () {
                    return getAndTrimHtmlOfChildElement(this, "".id"");
                })
                .toArray();
            // gets buying product rows
            let buyingProductRows = rows.filter(function () {
");
            WriteLiteral(@"                let transactionId = getAndTrimHtmlOfChildElement(this, "".transactionId"");
                return $.inArray(transactionId, buyingTransactionIds) > -1;
            });
            // gets selling product rows
            let sellingProductRows = rows.filter(function () {
                let transactionId = getAndTrimHtmlOfChildElement(this, "".transactionId"");
                return $.inArray(transactionId, sellingTransactionIds) > -1;
            });
            // merges buying rows in one object and selling rows in one object
            let buyingTransactionAndProductRows = buyingTransactionRows.add(buyingProductRows);
            let sellingTransactionAndProductRows = sellingTransactionRows.add(sellingProductRows);
            return [buyingTransactionAndProductRows, sellingTransactionAndProductRows];
        };

        // highlights relevant rows in other tables when hovering over a row based on ids
        // transaction rows
        let highlightRowsBasedOnTransactionRow ");
            WriteLiteral(@"= function (row) {
            let relevantRows = findRelevantRowsByTransactionRow(row);
            // extracts buyer id and seller id from transaction row
            let buyerId = $.trim($(row).find("".buyerId"").html());
            let sellerId = $.trim($(row).find("".sellerId"").html());
            // finds buyer and seller rows to highlight them differently
            let buyerAndSellerRows = findBuyerAndSellerInRows(relevantRows, buyerId, sellerId);
            let buyerRow = buyerAndSellerRows[0];
            let sellerRow = buyerAndSellerRows[1];
            // highlight rows
            $(row).add(relevantRows).not(buyerRow).not(sellerRow).addClass(""bg-info"");
            buyerRow.addClass(""bg-success"");
            sellerRow.addClass(""bg-warning"");
            $(row).addClass(""highlight-base"");
        };

        // product rows
        let highlightRowsBasedOnProductRow = function (row) {
            let relevantRows = findRelevantRowsByProductRow(row);
            // extracts b");
            WriteLiteral(@"uyer id and seller id from the transaction row, which has been fetched in relevant rows
            let buyerId = getAndTrimHtmlOfChildElement(relevantRows, "".buyerId"");
            let sellerId = getAndTrimHtmlOfChildElement(relevantRows, "".sellerId"");
            // finds buyer and seller rows to highlight them differently
            let buyerAndSellerRows = findBuyerAndSellerInRows(relevantRows, buyerId, sellerId);
            let buyerRow = buyerAndSellerRows[0];
            let sellerRow = buyerAndSellerRows[1];
            // highlight rows
            $(row).add(relevantRows).not(buyerRow).not(sellerRow).addClass(""bg-info"");
            buyerRow.addClass(""bg-success"");
            sellerRow.addClass(""bg-warning"");
            $(row).addClass(""highlight-base"");
        };

        // person rows
        let highlightRowsBasedOnPersonRow = function (row) {
            let relevantRows = findRelevantRowsByPersonRow(row);
            let personId = getAndTrimHtmlOfChildElement(row, "".id"")");
            WriteLiteral(@";
            // separates transaction and product rows into buying rows and selling rows
            let buyingAndSellingTransactionAndProductRows = findBuyingAndSellingTransactionAndProductInRows(relevantRows, personId);
            let buyingRows = buyingAndSellingTransactionAndProductRows[0];
            let sellingRows = buyingAndSellingTransactionAndProductRows[1];
            // highlights rows
            $(row).add(relevantRows).not(buyingRows).not(sellingRows).addClass(""bg-info"");
            buyingRows.addClass(""bg-warning"");
            sellingRows.addClass(""bg-success"");
            $(row).addClass(""highlight-base"");
        };

        // unhighlights all rows in all data tables highlighted by any color
        // also wipes the highlight-base marker
        let unhighlightAllRows = function () {
            $(dataTablesSelector)
                .find(""tbody"")
                .find("".bg-info, .bg-warning, .bg-success, .highlight-base"")
                .removeClass(""bg-info bg-w");
            WriteLiteral(@"arning bg-success highlight-base"");
        };

        $(document).on(""click"", function (e) {
            let etarget = $(e.target);
            // unhighlights when anything except:
            // thead
            // tbody button, tbody input
            // tfoot
            // is clicked
            let needToUnhighlight =
                !(etarget.closest(dataTablesSelector).length > 0
                && (etarget.closest(""thead"").length > 0
                || etarget.closest(""tbody button"").length > 0
                || etarget.closest(""tbody input"").length > 0
                || etarget.closest(""tfoot"").length > 0));
            // need to highlight if clicking a data table row
            // that currently is not a highlight base.
            // this way, clicking a highlight base row will unhighlight
            let needToHighlight =
                etarget.closest(dataTablesSelector).length > 0
                && etarget.closest(""tbody"").length > 0
                && !etarget.cl");
            WriteLiteral(@"osest(""tbody button"").length > 0
                && !etarget.closest(""tbody input"").length > 0
                && !etarget.closest(""tr"").is("".highlight-base"");
            if (needToUnhighlight) {
                unhighlightAllRows();
            }
            if (needToHighlight) {
                // chooses the correct highlight function depending on the position of the row
                let highlightFunction =
                    etarget.closest(""table"").hasClass(""transactions"") ? highlightRowsBasedOnTransactionRow :
                    etarget.closest(""table"").hasClass(""products"") > 0 ? highlightRowsBasedOnProductRow :
                    etarget.closest(""table"").hasClass(""persons"") > 0 ? highlightRowsBasedOnPersonRow : null;
                highlightFunction(etarget.closest(""tr""));
            }
        });
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<technostar_test.Models.IndexViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
